<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" type="text/css" href="styles.css">
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <div>
        Video: <select id="camera"></select>
    </div>

    <video autoplay id="video-camera"></video>
    
    <div>
        <label>Your Name</label><input type="text" id="myName">
        <label>Message</label><input type="text" id="myMessage">
        <input type="submit" id="sendMessage">
        <div id="chatArea">Message Output: </br></div>
    </div>

    <script>

        //É preciso rodar a aplicação em um servidor node.js para acesssar microfone e câmera. Não tem como rodar no browser diretamente

        
        const videoSelect = document.querySelector('#camera');
        const videoArea = document.querySelector("video");
     
        const myName = document.getElementById("myName");
        const myMessage = document.getElementById("myMessage");
        const sendMessage = document.getElementById("sendMessage");
        const chatArea = document.getElementById("chatArea");
        const ROOM = "chat";
        
        const width = 240; //desired width
        let height = 0;  // calculated lated based on image ratio
        let streaming = false; // Used to determine when the video is loaded


        io = io.connect();

        io.emit('ready', ROOM)

        io.on('announce', (data) => {
            displayMessage(data.message)
        });

        io.on('message', ({author, message}) => {
            displayMessage(`${author}: ${message}`)
        });


        function displayMessage(message) {
            chatArea.innerHTML = chatArea.innerHTML + "<br/>" + message;
        }

        sendMessage.addEventListener('click', (e) => {
            io.emit('send', {"author":myName.value, "message":myMessage.value, "room":ROOM})
            e.preventDefault();
        }, false);



        async function getCameras() {

            // list all attached devices
            const sourceInfos = await navigator.mediaDevices.enumerateDevices()
     
            sourceInfos.forEach((source, idx) => {
                console.log(idx, source)
                const option = document.createElement('option');
                option.value = source.id;
                if (source.kind.includes('video')) {
                    option.text = source.label || 'camera' + (idx + 1)
                    videoSelect.appendChild(option)
                }

            })
        }

        
        function startStream() {
            //- getUserMedia Api - acessa dados do usuário
             // returns getUserMedia even if experimental
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

            const videoSource = videoSelect.value
            console.log(videoSource)

            // constraints - to the media
            const constraints = {
                audio: false,
                video: false
            }

            navigator.getUserMedia(constraints, onSuccess, onError)
        }


        function onSuccess(stream) {
            console.log("Success! We have a stream", stream);

            //referenciando o stream do usuário ao objeto de vídeo
            videoArea.srcObject = stream;
            videoArea.play()
        }

        function onError(error) {
            console.log('Error with getUserMedia: ', error)
        }
    </script>
</body>
</html>